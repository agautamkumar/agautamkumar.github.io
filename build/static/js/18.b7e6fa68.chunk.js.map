{"version":3,"sources":["example-components/DynamicTables1/DynamicTables1Example2/makeData.js","example-components/DynamicTables1/DynamicTables1Example1/index.js","example-components/DynamicTables1/DynamicTables1Example2/index.js","example-pages/DynamicTables1/index.js"],"names":["range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined","ReactTable","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","footerGroups","rows","prepareRow","className","Table","bordered","striped","hover","group","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","getFooterGroupProps","getFooterProps","LivePreviewExample","React","useMemo","Header","Footer","accessor","info","total","reduce","sum","values","GlobalFilter","globalFilter","setGlobalFilter","InputGroup","size","InputGroupAddon","addonType","InputGroupText","icon","Input","value","onChange","e","target","placeholder","type","DefaultColumnFilter","filterValue","setFilter","SelectColumnFilter","preFilteredRows","id","options","Set","forEach","add","bsSize","option","key","SliderColumnFilter","min","length","max","CustomInput","parseInt","NumberRangeColumnFilter","style","display","val","old","fuzzyTextFilterFn","matchSorter","keys","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useFilters","useGlobalFilter","state","preGlobalFilteredRows","firstPageRows","slice","headerGroup","canFilter","colSpan","textAlign","filterGreaterThan","autoRemove","DynamicTables1","titleHeading","titleDescription","sectionHeading","DynamicTables1Example1","DynamicTables1Example2"],"mappings":"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","file":"static/js/18.b7e6fa68.chunk.js","sourcesContent":["import namor from 'namor';\n\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? 'relationship'\n        : statusChance > 0.33\n        ? 'complicated'\n        : 'single'\n  };\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n","import React, { Fragment } from 'react';\n\nimport { Table } from 'reactstrap';\n\nimport { useTable } from 'react-table';\n\nimport makeData from '../DynamicTables1Example2/makeData';\n\nfunction ReactTable({ columns, data }) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n\n  // Render the UI for your table\n  return (\n    <div className=\"table-responsive-md\">\n      <Table bordered striped hover {...getTableProps()}>\n        <thead>\n          {headerGroups.map(group => (\n            <tr {...group.getHeaderGroupProps()}>\n              {group.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot className=\"font-weight-bold\">\n          {footerGroups.map(group => (\n            <tr {...group.getFooterGroupProps()}>\n              {group.headers.map(column => (\n                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n              ))}\n            </tr>\n          ))}\n        </tfoot>\n      </Table>\n    </div>\n  );\n}\n\nfunction LivePreviewExample() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        Footer: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n            Footer: 'First Name'\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n            Footer: 'Last Name'\n          }\n        ]\n      },\n      {\n        Header: 'Info',\n        Footer: 'Info',\n        columns: [\n          {\n            Header: 'Age',\n            accessor: 'age',\n            Footer: 'Age'\n          },\n          {\n            Header: 'Visits',\n            accessor: 'visits',\n            Footer: info => {\n              // Only calculate total visits if rows change\n              const total = React.useMemo(\n                () =>\n                  info.rows.reduce((sum, row) => row.values.visits + sum, 0),\n                [info.rows]\n              );\n\n              return <>Total: {total}</>;\n            }\n          },\n          {\n            Header: 'Status',\n            accessor: 'status',\n            Footer: 'Status'\n          },\n          {\n            Header: 'Profile Progress',\n            accessor: 'progress',\n            Footer: 'Profile Progress'\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => makeData(20), []);\n\n  return (\n    <Fragment>\n      <ReactTable columns={columns} data={data} />\n    </Fragment>\n  );\n}\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n  Table,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  CustomInput,\n  Input\n} from 'reactstrap';\n\nimport { useTable } from 'react-table';\n\nimport { useFilters, useGlobalFilter } from 'react-table';\nimport matchSorter from 'match-sorter';\nimport makeData from './makeData';\n\n// Define a default UI for filtering\nfunction GlobalFilter({ globalFilter, setGlobalFilter }) {\n  return (\n    <span>\n      <InputGroup size=\"lg\" className=\"input-group-seamless\">\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <FontAwesomeIcon icon={['fas', 'search']} className=\"mx-auto\" />\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input\n          value={globalFilter || ''}\n          onChange={e => {\n            setGlobalFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n          }}\n          placeholder={'Search records...'}\n          type=\"search\"\n        />\n      </InputGroup>\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({ column: { filterValue, setFilter } }) {\n  return (\n    <InputGroup size=\"sm\" className=\"input-group-seamless mt-2\">\n      <InputGroupAddon addonType=\"prepend\">\n        <InputGroupText>\n          <FontAwesomeIcon icon={['fas', 'search']} className=\"mx-auto\" />\n        </InputGroupText>\n      </InputGroupAddon>\n      <Input\n        value={filterValue || ''}\n        onChange={e => {\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={'Search records...'}\n        type=\"search\"\n      />\n    </InputGroup>\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id }\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Input\n      type=\"select\"\n      bsSize=\"sm\"\n      className=\"mt-2\"\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined);\n      }}>\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </Input>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id }\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <CustomInput\n        className=\"mt-2\"\n        type=\"range\"\n        min={min}\n        max={max}\n        id={filterValue || min}\n        value={filterValue || min}\n        onChange={e => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id }\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: 'flex'\n      }}>\n      <Input\n        bsSize=\"sm\"\n        className=\"mt-2 mr-1\"\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1]\n          ]);\n        }}\n        placeholder={'Min ' + min}\n      />\n      <span> </span>\n      <Input\n        bsSize=\"sm\"\n        className=\"mt-2 ml-1\"\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined\n          ]);\n        }}\n        placeholder={'Max ' + max}\n      />\n    </div>\n  );\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] });\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val;\n\n// Our table component\nfunction ReactTable({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      }\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 10);\n\n  return (\n    <>\n      <Table hover striped bordered {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan=\"5\"\n              style={{\n                textAlign: 'left'\n              }}>\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td colSpan=\"6\" className=\"text-center\">\n              <div>\n                Showing the first <b>20 results</b> of <b>{rows.length}</b> rows\n              </div>\n            </td>\n          </tr>\n        </tfoot>\n      </Table>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';\n\nfunction LivePreviewExample() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName'\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n            filter: 'fuzzyText'\n          }\n        ]\n      },\n      {\n        Header: 'Info',\n        columns: [\n          {\n            Header: 'Age',\n            accessor: 'age',\n            Filter: SliderColumnFilter,\n            filter: 'equals'\n          },\n          {\n            Header: 'Visits',\n            accessor: 'visits',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between'\n          },\n          {\n            Header: 'Status',\n            accessor: 'status',\n            Filter: SelectColumnFilter,\n            filter: 'includes'\n          },\n          {\n            Header: 'Profile Progress',\n            accessor: 'progress',\n            Filter: SliderColumnFilter,\n            filter: filterGreaterThan\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => makeData(1000), []);\n\n  return (\n    <Fragment>\n      <ReactTable columns={columns} data={data} />\n    </Fragment>\n  );\n}\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { PageTitle } from '../../layout-components';\n\nimport { ExampleWrapperSimple } from '../../layout-components';\nimport DynamicTables1Example1 from '../../example-components/DynamicTables1/DynamicTables1Example1';\nimport DynamicTables1Example2 from '../../example-components/DynamicTables1/DynamicTables1Example2';\nexport default function DynamicTables1() {\n  return (\n    <Fragment>\n      <PageTitle\n        titleHeading=\"React Table\"\n        titleDescription=\"Dynamic tables with advanced functionality like sort, search or filter.\"\n      />\n\n      <ExampleWrapperSimple sectionHeading=\"Basic\">\n        <DynamicTables1Example1 />\n      </ExampleWrapperSimple>\n      <ExampleWrapperSimple sectionHeading=\"Filtering\">\n        <DynamicTables1Example2 />\n      </ExampleWrapperSimple>\n    </Fragment>\n  );\n}\n"],"sourceRoot":""}