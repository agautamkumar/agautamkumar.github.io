{"version":3,"sources":["example-components/ImageCrop/ImageCropBasic/index.js","example-pages/ImageCrop/index.js"],"names":["LivePreviewExample","props","state","imgSrc","stock3","image","imageLoaded","image1","imageL1oaded","image2","image2Loaded","image3","image3Loaded","image4","image4Loaded","image4BeforeLoaded","image4Values","this","setState","node","crop","values","Row","Col","lg","Card","className","CardHeader","CardBody","src","ref","onImgLoad","handleImageLoaded","Button","color","onClick","handleClick","alt","originX","originY","image1Loaded","disabled","ratio","width","height","fixedRatio","allowNewSelection","onChange","handleChange","styles","source_img","WebkitFilter","filter","modal","opacity","backgroundColor","dotInner","borderColor","dotInnerCenterVertical","dotInnerCenterHorizontal","beforeImgLoad","handleBeforeImageLoad","Component","ImageCrop","titleHeading","titleDescription","sectionHeading","ImageCropBasic"],"mappings":"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","file":"static/js/76.0865c813.chunk.js","sourcesContent":["import React, { Fragment, Component } from 'react';\n\nimport { Row, Col, CardBody, Card, CardHeader, Button } from 'reactstrap';\n\nimport stock3 from '../../../assets/images/stock-photos/stock-3.jpg';\n\nimport Cropper from 'react-cropper';\n\nclass LivePreviewExample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgSrc: stock3,\n      image: '',\n      imageLoaded: false,\n      image1: '',\n      imageL1oaded: false,\n      image2: '',\n      image2Loaded: false,\n      image3: '',\n      image3Loaded: false,\n      image4: '',\n      image4Loaded: false,\n      image4BeforeLoaded: false,\n      image4Values: ''\n    };\n  }\n\n  handleImageLoaded(state) {\n    this.setState({\n      [state + 'Loaded']: true\n    });\n  }\n\n  handleBeforeImageLoad(state) {\n    this.setState({\n      [state + 'BeforeLoaded']: true\n    });\n  }\n\n  handleClick(state) {\n    let node = this[state];\n    this.setState({\n      [state]: node.crop()\n    });\n  }\n\n  handleChange(state, values) {\n    this.setState({\n      [state + 'Values']: values\n    });\n  }\n\n  handleGetValues(state) {\n    let node = this[state];\n    this.setState({\n      [state + 'Values']: node.values()\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Row>\n          <Col lg=\"6\">\n            <Card className=\"card-box mb-5\">\n              <CardHeader>Simple</CardHeader>\n              <CardBody>\n                <Cropper\n                  src={this.state.imgSrc}\n                  ref={ref => {\n                    this.image = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image')}\n                />\n                <div className=\"divider\" />\n                <div className=\"text-center\">\n                  {this.state.imageLoaded ? (\n                    <div className=\"text-center\">\n                      <Button\n                        color=\"primary\"\n                        onClick={() => this.handleClick('image')}>\n                        Crop Selection\n                      </Button>\n                    </div>\n                  ) : null}\n\n                  {this.state.image ? (\n                    <div>\n                      <div className=\"divider\" />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardBody>\n            </Card>\n            <Card className=\"card-box mb-5\">\n              <CardHeader>Predefined start X, Y origins</CardHeader>\n              <CardBody>\n                <Cropper\n                  src={this.state.imgSrc}\n                  originX={100}\n                  originY={100}\n                  ref={ref => {\n                    this.image1 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image1')}\n                />\n                <div className=\"divider\" />\n                <div className=\"text-center\">\n                  {this.state.image1Loaded ? (\n                    <div className=\"text-center\">\n                      <Button\n                        color=\"primary\"\n                        onClick={() => this.handleClick('image1')}>\n                        Crop Selection\n                      </Button>\n                    </div>\n                  ) : null}\n                  {this.state.image1 ? (\n                    <div>\n                      <div className=\"divider\" />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image1}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardBody>\n            </Card>\n            <Card className=\"card-box mb-5\">\n              <CardHeader>Disabled</CardHeader>\n              <CardBody>\n                <Cropper\n                  src={this.state.imgSrc}\n                  ref={ref => {\n                    this.image3 = ref;\n                  }}\n                  disabled\n                />\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg=\"6\">\n            <Card className=\"card-box mb-5\">\n              <CardHeader>Predefined Ratio</CardHeader>\n              <CardBody>\n                <Cropper\n                  src={this.state.imgSrc}\n                  ratio={16 / 9}\n                  width={300}\n                  ref={ref => {\n                    this.image2 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image2')}\n                />\n                <div className=\"divider\" />\n                {this.state.image2Loaded ? (\n                  <div className=\"text-center\">\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.handleClick('image2')}>\n                      Crop Selection\n                    </Button>\n                  </div>\n                ) : null}\n\n                {this.state.image2 ? (\n                  <div>\n                    <div className=\"divider\" />\n                    <div>\n                      <h6>Cropped Result</h6>\n                    </div>\n                    <img\n                      className=\"after-img rounded\"\n                      src={this.state.image2}\n                      alt=\"\"\n                    />\n                  </div>\n                ) : null}\n              </CardBody>\n            </Card>\n            <Card className=\"card-box mb-5\">\n              <CardHeader>Custom Styles</CardHeader>\n              <CardBody>\n                <Cropper\n                  src={this.state.imgSrc}\n                  width={200}\n                  height={500}\n                  originX={200}\n                  originY={50}\n                  fixedRatio={false}\n                  allowNewSelection={false}\n                  onChange={values => this.handleChange('image4', values)}\n                  styles={{\n                    source_img: {\n                      WebkitFilter: 'blur(3.5px)',\n                      filter: 'blur(3.5px)'\n                    },\n                    modal: {\n                      opacity: 0.5,\n                      backgroundColor: '#fff'\n                    },\n                    dotInner: {\n                      borderColor: '#ff0000'\n                    },\n                    dotInnerCenterVertical: {\n                      backgroundColor: '#ff0000'\n                    },\n                    dotInnerCenterHorizontal: {\n                      backgroundColor: '#ff0000'\n                    }\n                  }}\n                  ref={ref => {\n                    this.image4 = ref;\n                  }}\n                  onImgLoad={() => this.handleImageLoaded('image4')}\n                  beforeImgLoad={() => this.handleBeforeImageLoad('image4')}\n                />\n                <div className=\"divider\" />\n                <div className=\"text-center\">\n                  {this.state.image4Loaded ? (\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.handleClick('image4')}>\n                      Crop Selection\n                    </Button>\n                  ) : null}\n                  {this.state.image4 ? (\n                    <div>\n                      <div className=\"divider\" />\n                      <div>\n                        <h6>Cropped Result</h6>\n                      </div>\n                      <img\n                        className=\"after-img rounded\"\n                        src={this.state.image4}\n                        alt=\"\"\n                      />\n                    </div>\n                  ) : null}\n                </div>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Fragment>\n    );\n  }\n}\n\nexport default LivePreviewExample;\n","import React, { Fragment } from 'react';\n\nimport { PageTitle } from '../../layout-components';\nimport { ExampleWrapperSeamless } from '../../layout-components';\n\nimport ImageCropBasic from '../../example-components/ImageCrop/ImageCropBasic';\nexport default function ImageCrop() {\n  return (\n    <Fragment>\n      <PageTitle\n        titleHeading=\"Image Crop\"\n        titleDescription=\"You can easily crop and edit images with this React component.\"\n      />\n      <ExampleWrapperSeamless sectionHeading=\"Basic\">\n        <ImageCropBasic />\n      </ExampleWrapperSeamless>\n    </Fragment>\n  );\n}\n"],"sourceRoot":""}